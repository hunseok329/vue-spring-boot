package com.example.vuespringboot.controller;

import com.example.vuespringboot.dao.NoticeRepository;
import com.example.vuespringboot.dao.UserRepository;
import com.example.vuespringboot.entity.NoticeList;
import com.example.vuespringboot.entity.User;
import com.example.vuespringboot.service.CrawlingService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
@RequiredArgsConstructor
public class MainController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;
    private final NoticeRepository noticeRepository;

    final private static Logger LOG = Logger.getGlobal();
    @Autowired
    private CrawlingService crawlingService;


    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }


    @GetMapping(path = "/hello")
    public @ResponseBody ArrayList<HashMap<String, String>> noticeCrawling(HttpServletRequest request) throws IOException {
        String username = request.getParameter("username");
//        List<NoticeList> noticeLists = noticeRepository.findByUserId(username);
//
//        for(NoticeList item : noticeLists) {
//            System.out.println(item.getUserId());
//            System.out.println(item.getNoticeIndex());
//            System.out.println(item.getNoticeUrl());
//        }

        //크롤링 결과 리스트
        ArrayList<HashMap<String, String>> notice = crawlingService.getNotice();

        return notice;
    }

    public static final String SECURED_TEXT = "Hello from the secured resource!";

    @GetMapping(path="/login")
    public @ResponseBody void login() {
        LOG.info("GET sucessfully called on /login resource");
        System.out.println("test");
    }

    @GetMapping(path = "/secured")
    public @ResponseBody String getSecured() {
        LOG.info("GET successfully called on /secured resource");
        //notice list 테이블 test
        List<NoticeList> notice_list = noticeRepository.findByUserId("admin");

        for (NoticeList item: notice_list) {
            System.out.println(item.getId());
            System.out.println(item.getUserId());
            System.out.println(item.getNoticeIndex());
            System.out.println(item.getNoticeUrl());
        }


        return SECURED_TEXT;
    }
}
